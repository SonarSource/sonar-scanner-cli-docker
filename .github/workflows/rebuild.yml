name: Rebuild

on:
  schedule:
    - cron: '23 3 * * *'

jobs:
  trivy:
    name: Check for vulnerabilities
    runs-on: ubuntu-latest
    outputs:
      vulnerable: ${{ steps.triviy-run.outcome == 'failure' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Run Trivy vulnerability scanner
        id: triviy-run
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: 'docker.io/sonarsource/sonar-scanner-cli'
          exit-code: 1
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  base-image:
    name: Check for newer base image
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.hash.outputs.changed }}
    permissions:
      actions: write
    steps:
      - uses: actions/cache@v3
        with:
          path: image-hashes/
          key: image-hashes
      - name: Pull base image
        run: docker pull alpine:3.15
      - name: Check base image hash
        id: hash
        run: |
          mkdir -p image-hashes/
          NEW_IMAGE_ID=$(docker image inspect --format='{{.ID}}' alpine:3.15)
          OLD_IMAGE_ID=$(test -f image-hashes/alpine:3.15.hash && cat image-hashes/alpine:3.15.hash || echo "Hash not found")
          if [[ "$NEW_IMAGE_ID" != "$OLD_IMAGE_ID" ]]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi
          echo "${NEW_IMAGE_ID}" > image-hashes/alpine:3.15.hash

  build:
    name: Build & Push
    needs:
      - trivy
      - base-image
    runs-on: ubuntu-latest
    if: ${{ needs.trivy.outputs.vulnerable == 'true' || needs.base-image.outputs.changed == 'true' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - id: secrets
        uses: SonarSource/vault-action-wrapper@2.4.3-1
        with:
          secrets: |
            development/kv/data/sign key | gpg_key;
            development/kv/data/sign passphrase | gpg_passphrase;
            development/kv/data/docker/sonardockerrw access_token_rwd | docker_access_token;
            development/kv/data/docker/sonardockerrw username | docker_username;
            development/artifactory/token/{REPO_OWNER_NAME_DASH}-docker-release access_token | repox_access_token;
            development/kv/data/slack webhook | slack_webhook;
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Fetch scanning examples
        uses: actions/checkout@v2
        with:
          repository: SonarSource/sonar-scanning-examples
          path: target_repository
      - uses: thebritican/fetch-latest-release@v2.0.0
        id: latest_release
      - name: Get the version
        id: get_version
        run: |
          IFS=. read major minor patch build <<<"${{ steps.latest_release.outputs.tag_name }}"
          echo "major=${major}" >> $GITHUB_OUTPUT
          echo "major_minor=${major}.${minor}" >> $GITHUB_OUTPUT
          echo "major_minor_patch=${major}.${minor}.${patch}" >> $GITHUB_OUTPUT
      - name: Build an image from Dockerfile
        run: |
          docker build "5" \
            --pull \
            --tag "sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major }}" \
            --tag "repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major }}" \
            --tag "sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor }}" \
            --tag "repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor }}" \
            --tag "sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor_patch }}" \
            --tag "repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor_patch }}" \
            --tag "sonarsource/sonar-scanner-cli:latest" \
            --tag "repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:latest" \
            --build-arg SONAR_SCANNER_VERSION=${{ steps.latest_release.outputs.tag_name }} \
            -f 5/Dockerfile
      - name: Test image
        run: ./run-tests.sh "sonarsource/sonar-scanner-cli:latest"
      - name: Generate CycloneDX SBOM
        uses: SonarSource/gh-action_sbom@v1
        with:
          image: "sonarsource/sonar-scanner-cli:latest"
          filename: "sonar-scanner-cli-latest-bom.json"
          upload-artifact: true
          upload-release-assets: false
        env:
          GPG_PRIVATE_KEY_PASSPHRASE: ${{ fromJSON(steps.secrets.outputs.vault).gpg_passphrase }}
          GPG_PRIVATE_KEY_BASE64: ${{ fromJSON(steps.secrets.outputs.vault).gpg_key }}
      - name: Push image
        run: |
          docker login --username ${{ fromJSON(steps.secrets.outputs.vault).docker_username }} --password-stdin <<< "${{ fromJSON(steps.secrets.outputs.vault).docker_access_token }}"
          docker push sonarsource/sonar-scanner-cli:latest
          docker push sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor_patch }}
          docker push sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor }}
          docker push sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major }}
          docker login repox-sonarsource-docker-releases.jfrog.io --username vault-SonarSource-sonar-scanner-cli-docker-docker-release --password-stdin <<< "${{ fromJSON(steps.secrets.outputs.vault).repox_access_token }}"
          docker push repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:latest
          docker push repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor_patch }}
          docker push repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major_minor }}
          docker push repox-sonarsource-docker-releases.jfrog.io/sonarsource/sonar-scanner-cli:${{ steps.get_version.outputs.major }}
      - name: Notify failures on Slack
        if: failure()
        uses: Ilshidur/action-slack@2.0.0
        env:
          SLACK_CHANNEL: team-sq-devops
          SLACK_WEBHOOK: ${{ fromJSON(steps.secrets.outputs.vault).slack_webhook }}
        with:
          args: "Build and Push for sonar-scanner-cli-docker failed, see the logs at https://github.com/SonarSource/sonar-scanner-cli-docker/actions"
